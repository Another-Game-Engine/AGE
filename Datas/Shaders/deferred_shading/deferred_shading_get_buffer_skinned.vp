#version 330

layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoord;
layout (location = 3) in vec3 tangent;
layout (location = 4) in vec4 blendWeight;
layout (location = 5) in vec4 blendIndice;

uniform mat4 projection_matrix;
uniform mat4 view_matrix;
uniform mat4 model_matrix;
uniform float scaleUvs;
uniform mat4 bones[166];

uniform sampler2D diffuse_map;
uniform sampler2D normal_map;

out VertexData {
	vec3 inter_normal;
	vec3 inter_tangent;
	vec2 inter_texCoord;
} VertexOut;

vec3 scaleFromMat4(const mat4 m)
{
	// Extract col vectors of the matrix
	vec3 col1 = vec3(m[0][0], m[0][1], m[0][2]);
	vec3 col2 = vec3(m[1][0], m[1][1], m[1][2]);
	vec3 col3 = vec3(m[2][0], m[2][1], m[2][2]);

	//vec3 col1 = vec3(m[0][0], m[1][0], m[2][0]);
	//vec3 col2 = vec3(m[0][1], m[1][1], m[2][1]);
	//vec3 col3 = vec3(m[0][2], m[1][2], m[2][2]);

	//Extract the scaling factors
	vec3 scaling;
	scaling.x = length(col1);
	scaling.y = length(col2);
	scaling.z = length(col3);
	return scaling;
}

void main()
{
	mat3 normal_matrix = transpose(inverse(mat3(model_matrix)));
	VertexOut.inter_normal = normalize(normal_matrix * normal);
	VertexOut.inter_texCoord = texCoord;
	if (scaleUvs > 0.0f)
	{
		vec3 scale = scaleFromMat4(model_matrix);
		if (normal.y != 0)
		{
			scale.y = scale.z;
		}
		if (normal.x != 0)
		{
			scale.x = scale.z;
		}

		VertexOut.inter_texCoord = (vec3(texCoord, 0) * scale).xy;
	}

	vec4 newPosition = vec4(position, 1);
	newPosition = vec4(0);
	if (blendWeight.x > 0.0f)
		newPosition += (bones[int(blendIndice.x)] * vec4(position, 1)) * blendWeight.x;
	if (blendWeight.y > 0.0f)
		newPosition += (bones[int(blendIndice.y)] * vec4(position, 1)) * blendWeight.y;
	if (blendWeight.z > 0.0f)
		newPosition += (bones[int(blendIndice.z)] * vec4(position, 1)) * blendWeight.z;
	if (blendWeight.w > 0.0f)
		newPosition += (bones[int(blendIndice.w)] * vec4(position, 1)) * blendWeight.w;

	VertexOut.inter_tangent = normalize(normal_matrix * tangent);
	gl_Position = projection_matrix * view_matrix * model_matrix * vec4(newPosition.xyz, 1);
}