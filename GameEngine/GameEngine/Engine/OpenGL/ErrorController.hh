#ifndef ERRORCONTROLLER_HH_
# define ERRORCONTROLLER_HH_

# include "Utils/OpenGL.hh"
# include "VertexArray.hh"

namespace OpenGLTools
{

	template <typename T>
	void ErrorController();

	template <>
	void ErrorController<VertexArray::Attribute>()
	{
		GLenum error = glGetError();
		if (error == GL_NO_ERROR)
			return;
		std::cerr << "Error generate into Attribute data by glVertexAttribPointer" << std::endl;
		switch (error)
		{
		case GL_INVALID_VALUE:
			std::cerr << "GL_INVALID_VALUE is generated if index is greater than or equal to GL_MAX_VERTEX_ATTRIBS." << std::endl;
				std::cerr << "GL_INVALID_VALUE is generated if  size is not 1, 2, 3, 4 or (for glVertexAttribPointer), GL_BGRA." << std::endl;
				std::cerr << "GL_INVALID_VALUE is generated if stride is negative." << std::endl;
			break;
		case GL_INVALID_ENUM:
			std::cerr << "GL_INVALID_ENUM is generated if type is not an accepted value." << std::endl;
		case GL_INVALID_OPERATION:
		std::cerr << "GL_INVALID_OPERATION is generated if size is GL_BGRA and type is not GL_UNSIGNED_BYTE, GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV." << std::endl;
		std::cerr << "GL_INVALID_OPERATION is generated if type is GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV and size is not 4 or GL_BGRA." << std::endl;
		std::cerr << "GL_INVALID_OPERATION is generated if type is GL_UNSIGNED_INT_10F_11F_11F_REV and size is not 3." << std::endl;
		std::cerr << "GL_INVALID_OPERATION is generated by glVertexAttribPointer if size is GL_BGRA and noramlized is GL_FALSE." << std::endl;
		std::cerr << "GL_INVALID_OPERATION is generated if zero is bound to the GL_ARRAY_BUFFER buffer object binding point and the pointer argument is not NULL." << std::endl;
			break;
		}
	}
}

#endif /*!ERRORCONTROLLER_HH_*/