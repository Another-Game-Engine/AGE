#version 440

uniform global_state
{
	 mat4 projection_matrix;
	 vec4 pos_light;
};

layout (location = 0) in vec4 position;
layout (location = 1) in vec4 color;
layout (location = 2) in vec4 normal;
layout (location = 3) in vec2 texCoord;

uniform mat4 view_matrix;
uniform mat4 model_matrix;

out vec4 interpolated_position;
out vec3 interpolated_normal;
out vec2 interpolated_texCoord;
out vec4 pos_light_viewspace;

void main(void)
{
	mat3 normal_matrix = transpose(inverse(mat3(view_matrix * model_matrix))); 
	interpolated_position = view_matrix * model_matrix * position;
	interpolated_normal = normal_matrix * vec3(normal);
	interpolated_texCoord = texCoord;
	pos_light_viewspace = view_matrix * pos_light;
	gl_Position = projection_matrix * interpolated_position;
}