#version 430

layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 texCoord;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec4 blendWeight;
layout(location = 5) in vec4 blendIndice;

out vec4 interpolated_color;
out vec2 vTexCoord;

uniform mat4 projection_matrix;
uniform mat4 view_matrix;
uniform mat4 model_matrix;
uniform mat4 bones[166];
uniform float skinned;
uniform vec4 diffuse;

void main(void)
{
	vTexCoord = texCoord;
	vec4 newPosition = vec4(position, 1);
	interpolated_color = diffuse;

	if (skinned > 0)
	{
		newPosition = vec4(0);
		if (blendWeight.x > 0.0f)
			newPosition = (bones[int(blendIndice.x)] * vec4(position, 1)) * blendWeight.x;
		if (blendWeight.y > 0.0f)
			newPosition += (bones[int(blendIndice.y)] * vec4(position, 1)) * blendWeight.y;
		if (blendWeight.z > 0.0f)
			newPosition += (bones[int(blendIndice.z)] * vec4(position, 1)) * blendWeight.z;
		if (blendWeight.w > 0.0f)
			newPosition += (bones[int(blendIndice.w)] * vec4(position, 1)) * blendWeight.w;
		interpolated_color = blendIndice / vec4(166);
		interpolated_color.w = 1.0f;
	}

	mat4 model_view = view_matrix * model_matrix;
	gl_Position = vec4(projection_matrix * model_view * vec4(newPosition.xyz, 1));
}