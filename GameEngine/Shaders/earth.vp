#version 430 core

layout (std140) uniform PerFrame
{
	mat4 projection;
	mat4 view;
	float time;
};

layout (std140) uniform PerModel
{
	mat4 model;
};

layout(binding = 0) uniform sampler2D fTexture0; // ambient;
layout(binding = 1) uniform sampler2D fTexture1; // diffuse;
layout(binding = 2) uniform sampler2D fTexture2; // specular;
layout(binding = 3) uniform sampler2D fTexture3; // normal;

layout (location = 0) in vec4 vPosition;
layout (location = 1) in vec4 vColor;
layout (location = 2) in vec4 vNormal;
layout (location = 3) in vec2 vTexCoord;

out vec4 fPosition;
out vec4 fColor;
out vec4 fNormal;
out vec2 fTexCoord;

void main(void)
{
  mat4 modelView = view * model;
//  mat4 vectorSpace = transpose(inverse(modelView));
//
//  fColor = vColor;
//  fNormal = vec4(normalize((vectorSpace * vNormal).xyz), 0);
//  fPosition = modelView * vPosition;
//  fTexCoord = vTexCoord;
  gl_Position = projection * modelView * vPosition;
}
