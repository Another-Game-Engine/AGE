#version 330

layout (std140) uniform MaterialBasic
{
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  vec3 transmittance;
  vec3 emission;
  float shininess;
};

layout (std140) uniform PerFrame
{
	mat4 projection;
	mat4 view;
	vec4 light;
	float time;
};

layout (std140) uniform PerModel
{
	mat4 model;
};

layout (std140) uniform Light
{
	mat4 lightMVP;
};

uniform          sampler2D fTexture0;//ambient;
uniform          sampler2D fTexture1;//diffuse;
uniform          sampler2D fTexture2;//specular;
uniform          sampler2D fTexture3;//normal;
uniform			 sampler2D fTexture4;// shadowMap;

layout (location = 0) in vec4 vPosition;
layout (location = 1) in vec4 vColor;
layout (location = 2) in vec4 vNormal;
layout (location = 3) in vec2 vTexCoord;

out vec4 fPosition;
out vec4 fColor;
out vec4 fNormal;
out vec2 fTexCoord;
out vec4 ShadowCoord;

void main(void)
{
  mat4 modelView = view * model;
  mat4 vectorSpace = transpose(inverse(modelView));

  fColor = vColor;
  fNormal = vec4(normalize((vectorSpace * vNormal).xyz), 0);
  fPosition = modelView * vPosition;
  fTexCoord = vTexCoord;
  ShadowCoord = lightMVP * vPosition;
  gl_Position = projection * modelView * vPosition;
}
