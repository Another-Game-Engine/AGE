#version 330

layout (std140) uniform MaterialBasic
{
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  vec3 transmittance;
  vec3 emission;
  float shininess;
};

layout (std140) uniform PerFrame
{
	mat4 projection;
	mat4 view;
	float time;
};

layout (std140) uniform PerModel
{
	mat4 model;
};

layout(std430, binding = 0) uniform sampler2D fTexture0;//ambient;
layout(std430, binding = 1) uniform sampler2D fTexture1;//diffuse;
layout(std430, binding = 2) uniform sampler2D fTexture2;//specular;
layout(std430, binding = 3) uniform sampler2D fTexture3;//normal;

layout(std140) struct PointLight
{
	vec3	position;
	vec3	color;
	float	range;
};

layout(std430, binding = 4) buffer lightBuff
{
	int			lightNbr;
	PointLight	lights[];
};

layout (location = 0) in vec4 vPosition;
layout (location = 1) in vec4 vColor;
layout (location = 2) in vec4 vNormal;
layout (location = 3) in vec2 vTexCoord;

out vec4 fPosition;
out vec4 fColor;
out vec4 fNormal;
out vec2 fTexCoord;

void main(void)
{
  mat4 modelView = view * model;
  mat4 vectorSpace = transpose(inverse(modelView));

  fColor = vColor;
  fNormal = vec4(normalize((vectorSpace * vNormal).xyz), 0);
  fPosition = model * vPosition;
  fTexCoord = vTexCoord;
  gl_Position = projection * modelView * vPosition;
}
