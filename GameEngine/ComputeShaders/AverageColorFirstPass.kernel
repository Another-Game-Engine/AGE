#version 430 core

uniform uvec2	colorBufferSize;

shared uint		groupAvgColorR = 0;
shared uint		groupAvgColorG = 0;
shared uint		groupAvgColorB = 0;
shared uint		groupColorNbr = 0;

layout (binding = 0, rgba32f) readonly uniform image2D colorBuffer;

// buffer to fill that contains per tile depth informations
layout(std430, binding = 1) buffer averageColorBuffer
{
	vec4	avgColors[];
};

// we use 16 * 16 threads groups
layout (local_size_x = 16, local_size_y = 16) in;

void	main()
{
	ivec2		position = ivec2(gl_GlobalInvocationID.xy);

	if (position.x < colorBufferSize.x &&
		position.y < colorBufferSize.y)
	{
		vec4	pxlColor = imageLoad(colorBuffer, position);
		uvec3	integerColor = uvec3(pxlColor.xyz * vec3(0xFFFF));

		atomicAdd(groupColorNbr, 1);
		atomicAdd(groupAvgColorR, integerColor.x);
		atomicAdd(groupAvgColorG, integerColor.y);
		atomicAdd(groupAvgColorB, integerColor.z);
	}
	barrier();
	if (gl_LocalInvocationID.xy == uvec2(0))
	{
		uint	curId = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;

		avgColors[curId] = vec4(vec3(groupAvgColorR, groupAvgColorG, groupAvgColorB) / vec3(0xFFFF) / vec3(groupColorNbr), 1.0f);
	}
}