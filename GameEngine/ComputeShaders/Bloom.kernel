#version 430 core

uniform uint	pass;
uniform float	glareFactor;

layout (binding = 0, rgba16f) uniform image2D input;
layout (binding = 1, rgba16f) uniform image2D finalOutput;

// we use 16 * 16 threads groups
layout (local_size_x = 16, local_size_y = 16) in;

void	main()
{
const float	ratios[] = {
						0.0044299121055113265f,
						0.00895781211794f,
						0.0215963866053f,
						0.0443683338718f,
						0.0776744219933f,
						0.115876621105f,
						0.147308056121f,
						0.147308056121f,
						0.115876621105f,
						0.0776744219933f,
						0.0443683338718f,
						0.0215963866053f,
						0.00895781211794f,
						0.0044299121055113265f
						};

const int	offsets[] = {
						-7,
						-6,
						-5,
						-4,
						-3,
						-2,
						-1,
						1,
						2,
						3,
						4,
						5,
						6,
						7
						};

	ivec2		position = ivec2(gl_GlobalInvocationID.xy);
	ivec2		inputSize = imageSize(input);

	if (position.x < inputSize.x &&
		position.y < inputSize.y)
	{
		vec3	baseColor = imageLoad(input, position).rgb;
		vec3	finalColor = baseColor + max((baseColor - vec3(glareFactor)), vec3(0.0f)) * 0.159576912161f;

		for (uint i = 0; i < 14; ++i)
		{
			ivec2	pxlPosition = position + ivec2(pass * offsets[i], (1 - pass) * offsets[i]);
			finalColor += max(imageLoad(input, pxlPosition).rgb - vec3(glareFactor), vec3(0)) * ratios[i];
		}
		imageStore(finalOutput, position, vec4(finalColor, 1.0f));
	}
}